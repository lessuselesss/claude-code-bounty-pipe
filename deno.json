{
  "tasks": {
    "generate": "deno run --allow-all src/bounty-index-generator.ts",
    "generate:full": "deno run --allow-all src/bounty-index-generator.ts --full-scan",
    "generate:quick": "deno run --allow-all src/bounty-index-generator.ts --max-age=6",
    "pre-filter": "deno run --allow-all src/pre-filter-engine.ts",
    "pre-filter:batch": "deno run --allow-all src/pre-filter-engine.ts --max-analyze=50",
    "pre-filter:conservative": "deno run --allow-all src/pre-filter-engine.ts --min-score=70 --max-analyze=25",
    "evaluate": "deno run --allow-all src/claude-evaluation-engine.ts",
    "evaluate:priority": "deno run --allow-all src/claude-evaluation-engine.ts --orgs=tscircuit,zio,twentyhq --max-evaluations=5",
    "evaluate:pre-filtered": "deno run --allow-all src/claude-evaluation-engine.ts --pre-filter-min=80 --max-evaluations=3",
    "evaluate:consider": "deno run --allow-all src/claude-evaluation-engine.ts --pre-filter-min=60 --max-evaluations=2",
    "evaluate:single": "deno run --allow-all src/claude-evaluation-engine.ts --max-evaluations=1",
    "evaluate:single:slash": "deno run --allow-all src/claude-evaluation-engine.ts --max-evaluations=1 --slash-command",
    "evaluate:safe": "deno run --allow-all src/run-async.ts evaluate-single",
    "evaluate:batch-safe": "deno run --allow-all src/run-async.ts evaluate-batch",
    "evaluate:slash": "deno run --allow-all src/claude-evaluation-engine.ts --max-evaluations=3 --slash-command",
    "bounty-pipe:help": "echo 'Available bounty-pipe commands:\n  /bounty-pipe:pre-filter   - Quick scoring assessment\n  /bounty-pipe:evaluate     - 5-phase comprehensive evaluation  \n  /bounty-pipe:prep         - 10-step preparation workflow\n  /bounty-pipe:implement    - TDD implementation execution\n  /bounty-pipe:submit       - Professional submission workflow\n  /bounty-pipe:pipeline     - Complete end-to-end pipeline'",
    "cache:stats": "deno run --allow-all scripts/cache-stats.ts",
    "cache:cleanup": "deno run --allow-all scripts/cache-cleanup.ts",
    "cache:force-cleanup": "deno run --allow-all scripts/cache-cleanup.ts --force",
    "pipeline": "deno run --allow-all src/pipeline-orchestrator.ts",
    "pipeline:auto-prep": "deno run --allow-all src/pipeline-orchestrator.ts --auto-prep --min-success=80",
    "pipeline:conservative": "deno run --allow-all src/pipeline-orchestrator.ts --auto-prep --min-success=85 --max-prep=1",
    "pipeline:safe": "deno run --allow-all src/run-async.ts pipeline-conservative",
    "pipeline:full": "deno run --allow-all src/pipeline-orchestrator.ts --auto-prep --auto-implement",
    "pipeline:full-conservative": "deno run --allow-all src/pipeline-orchestrator.ts --auto-prep --auto-implement --min-success=85 --max-implementations=1",
    "pipeline:claude-md-fast": "deno run --allow-all src/spec-driven/fast-track-claude-md.ts",
    "pipeline:claude-md-only": "deno run --allow-all src/pipeline-orchestrator.ts --spec-driven --claude-markdown-only --max-claude-markdown=5",
    "pipeline:with-claude-md": "deno run --allow-all src/pipeline-orchestrator.ts --spec-driven --generate-claude-markdown --max-claude-markdown=3",
    "pipeline:relaxed": "deno run --allow-all src/pipeline-orchestrator.ts --quick-evaluation --auto-prep --auto-implement --relaxed --min-success=25",
    "pipeline:relaxed-spec": "deno run --allow-all src/pipeline-orchestrator.ts --spec-driven --spec-auto-implement --relaxed --max-specs=1",
    "implement": "deno run --allow-all src/implementation-engine.ts",
    "implement:max": "deno run --allow-all src/implementation-engine.ts --max-implementations=5",
    "submit": "deno run --allow-all src/submission-workflow.ts",
    "submit:conservative": "deno run --allow-all src/submission-workflow.ts --min-success=90 --max-submissions=1",
    "submit:dry-run": "deno run --allow-all src/submission-workflow.ts --dry-run",
    "daily": "deno run --allow-all src/bounty-index-generator.ts --max-age=24 && deno run --allow-all src/pre-filter-engine.ts --max-analyze=10 && deno task evaluate:safe",
    "daily:safe": "deno task generate:quick && deno task pre-filter:conservative && deno task evaluate:safe",
    "daily:efficient": "deno task generate:quick && deno task pre-filter:conservative && deno task evaluate:single",
    "daily:with-claude-md": "deno task daily && deno task pipeline:claude-md-only",
    "weekly": "deno run --allow-all src/pre-filter-engine.ts --max-analyze=25 && deno task evaluate:batch-safe",
    "weekly:full-refresh": "deno task generate:full && deno task pre-filter && deno task evaluate:batch-safe",
    "weekly:with-claude-md": "deno task weekly && deno task pipeline:with-claude-md",
    "full-pipeline": "deno run --allow-all src/bounty-index-generator.ts && deno run --allow-all src/pre-filter-engine.ts && deno run --allow-all src/pipeline-orchestrator.ts --auto-prep --auto-implement --max-evaluations=5 && deno run --allow-all src/submission-workflow.ts --max-submissions=2",
    "smart-pipeline": "deno run --allow-all src/bounty-index-generator.ts && deno run --allow-all src/pre-filter-engine.ts --max-analyze=50 && deno run --allow-all src/claude-evaluation-engine.ts --pre-filter-min=80 --max-evaluations=3",
    "test:validation": "deno run --allow-all test/double-blind-validator.ts --use-real-data",
    "test:find-real-bounties": "deno run --allow-all test/real-completed-bounty-finder.ts",
    "test:validate-methodology": "deno run --allow-all test/validation-methodology.ts"
  },
  "imports": {
    "@std/": "https://deno.land/std@0.208.0/"
  },
  "lint": {
    "rules": {
      "tags": ["recommended"]
    }
  },
  "fmt": {
    "useTabs": false,
    "lineWidth": 100,
    "indentWidth": 2,
    "semiColons": true,
    "singleQuote": true,
    "proseWrap": "preserve"
  }
}